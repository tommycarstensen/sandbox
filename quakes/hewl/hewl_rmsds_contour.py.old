## HEWL contour plot of RMSDs

import numpy, os
import sys
sys.path.append('/home/people/tc/svn/tc_sandbox/misc/')
import gnuplot
sys.path.append('/home/people/tc/svn/tc_sandbox/pdb/')
import parse_mmCIF
sys.path.append('/home/people/tc/svn/Protool/')
import geometry
instance_geometry = geometry.geometry()

fd = open('pdbS95bF.out','r')
lines = fd.readlines()
fd.close()

cluster = int(sys.argv[-1])

method = 'heavy'
## accept selected ligands?
bool_ligands = False
## accept mutants?
bool_mutants = False

line = lines[cluster]
l_pdbs = line.split()
for i in range(len(l_pdbs)):
    l_pdbs[i] = l_pdbs[i].lower()

d_wts = {
    ## serine proteases
    2:{'spacegroup':'','name':'Thrombin (not pre-Thrombin)','seq':'IVEGSDAEIGMSPWQVMLFRKSPQELLCGASLISDRWVLTAAHCLLYPPWDKNFTENDLLVRIGKHSRTRYERNIEKISMLEKIYIHPRYNWRENLDRDIALMKLKKPVAFSDYIHPVCLPDRETAASLLQAGYKGRVTGWGNLKETWTANVGKGQPSVLQVVNLPIVERPVCKDSTRIRITDNMFCAGYKPDEGKRGDACEGDSGGPFVMKSPFNNRWYQMGIVSWGEGCDRDGKYGFYTHVFRLKKWIQKVIDQFGE',},
    13:{'spacegroup':'','name':'Trypsin (P00760, not trypsinogen)','seq':'IVGGYTCGANTVPYQVSLNSGYHFCGGSLINSQWVVSAAHCYKSGIQVRLGEDNINVVEGNEQFISASKSIVHPSYNSNTLNNDIMLIKLKSAASLNSRVASISLPTSCASAGTQCLISGWGNTKSSGTSYPDVLKCLKAPILSDSSCKSAYPGQITSNMFCAGYLEGGKDSCQGDSGGPVVCSGKLQGIVSWGSGCAQKNKPGVYTKVCNYVSWIKQTIASN',},

    ## glycosyl hydrolases
    ## T4L = 
    4:{'spacegroup':'P 32 2 1','name':'T4L','seq':'MNIFEMLRIDEGLRLKIYKDTEGYYTIGIGHLLTKSPSLNAAKSELDKAIGRNCNGVITKDEAEKLFNQDVDAAVRGILRNAKLKPVYDSLDAVRRCALINMVFQMGETGVAGFTNSLRMLQQKRWDEAAVNLAKSRWYNQTPNRAKRVITTFRTGTWDAYKNL',},
##    9:{'spacegroup':'','name':'HEWL','seq':'KVFGRCELAAAMKRHGLDNYRGYSLGNWVCAAKFESNFNTQATNRNTDGSTDYGILQINSRWWCNDGRTPGSRNLCNIPCSALLSSDITASVNCAKKIVSDGNGMNAWVAWRNRCKGTDVQAWIRGCRL',},
    9:{'spacegroup':'P 43 21 2','name':'HEWL','seq':'KVFGRCELAAAMKRHGLDNYRGYSLGNWVCAAKFESNFNTQATNRNTDGSTDYGILQINSRWWCNDGRTPGSRNLCNIPCSALLSSDITASVNCAKKIVSDGNGMNAWVAWRNRCKGTDVQAWIRGCRL',},
##    9:{'spacegroup':'P 1 21 1','name':'HEWL','seq':'KVFGRCELAAAMKRHGLDNYRGYSLGNWVCAAKFESNFNTQATNRNTDGSTDYGILQINSRWWCNDGRTPGSRNLCNIPCSALLSSDITASVNCAKKIVSDGNGMNAWVAWRNRCKGTDVQAWIRGCRL',},
    21:{'spacegroup':'P 21 21 21','name':'Human Lysozyme (P61626 excl signal peptide)','seq':'KVFERCELARTLKRLGMDGYRGISLANWMCLAKWESGYNTRATNYNAGDRSTDYGIFQINSRYWCNDGKTPGAVNACHLSCSALLQDNIADAVACAKRVVRDPQGIRAWVAWRNRCQNRDVRQYVQGCGV',},

    ## metal (electrostatic catalysis)
    18:{'spacegroup':'P 1 21 1','name':'Carbonic Anhydrase II (Homo sapiens)','seq':'MSHHWGYGKHNGPEHWHKDFPIAKGERQSPVDIDTHTAKYDPSLKPLSVSYDQATSLRILNNGHAFNVEFDDSQDKAVLKGGPLDGTYRLIQFHFHWGSLDGQGSEHTVDKKKYAAELHLVHWNTKYGDFGKAVQQPDGLAVLGIFLKVGSAKPGLQKVVDVLDSIKTKGKSADFTNFDPRGLLPESLDYWTYPGSLTTPPLLECVTWIVLKEPISVSSEQVLKFRKLNFNGEGEPEELMVDNWRPAQPLKNRQIKASFK',},
    27:{'spacegroup':'','name':'Azurin (P00282 excl signal peptide)','seq':'AECSVDIQGNDQMQFNTNAITVDKSCKQFTVNLSHPGNLPKNVMGHNWVLSTAADMQGVVTDGMASGLDKDYLKPDDSRVIAHTKLIGSGEKDSVTFDVSKLKEGEQYMFFCTFPGHSALMKGTLTLK',},
    24:{'spacegroup':'','name':'SOD (Homo sapiens, excl N-terminal Met)','seq':'ATKAVCVLKGDGPVQGIINFEQKESNGPVKVWGSIKGLTEGLHGFHVHEFGDNTAGCTSAGPHFNPLSRKHGGPKDEERHVGDLGNVTADKDGVADVSIEDSVISLSGDHCIIGRTLVVHEKADDLGKGGNEESTKTGNAGSRLACGVIGIAQ',},

    ## nuclease
    14:{'spacegroup':'','name':'RNase A (Bos Taurus, pancreas, P61823, excl signal peptide)','seq':'KETAAAKFERQHMDSSTSAASSSNYCNQMMKSRNLTKDRCKPVNTFVHESLADVQAVCSQKNVACKNGQTNCYQSYSTMSITDCRETGSSKYPNCAYKTTQANKHIIVACEGNPYVPVHFDASV',},
##    61:{'spacegroup':'P 41','name':'SNase (P00644, Nuclease A)','seq':'MLVMTEYLLSAGICMAIVSILLIGMAISNVSKGQYAKRFFFFATSCLVLTLVVVSSLSSSANASQTDNGVNRSGSEDPTVYSATSTKKLHKEPATLIKAIDGDTVKLMYKGQPMTFRLLLVDTPETKHPKKGVEKYGPEASAFTKKMVENAKKIEVEFDKGQRTDKYGRGLAYIYADGKMVNEALVRQGLAKVAYVYKPNNTHEQHLRKSEAQAKKEKLNIWSEDNADSGQ',},
    61:{'spacegroup':'','name':'SNase (P00644, Nuclease B)','seq':'ATSTKKLHKEPATLIKAIDGDTVKLMYKGQPMTFRLLLVDTPETKHPKKGVEKYGPEASAFTKKMVENAKKIEVEFDKGQRTDKYGRGLAYIYADGKMVNEALVRQGLAKVAYVYKPNNTHEQHLRKSEAQAKKEKLNIWSEDNADSGQ',},
    }

##l_wts= [
####    ## hexagonal
####    '2fbb',
####    ## not P 43 21 2
####    '1xei', '1xej', '1xek', '1v7s', '5lym', '3lyt', '4lzt', '1uco', '7lyz', '2zq4', '1wtm', '1wtn', '1lzt', '2z12', '1ps5', '1lcn', '1lj3', '1lkr', '1hf4', '1v7t', '2lzt', '1ved', '1lks', '4lyt', '1lj4', '2d4j', '2d4k', '2d4i', '2f2n', '2z19', '1vdq', '1lma', '1aki', '1jpo', '3lzt', '1lje', '2zq3', '1ljg', '1ljf', '1lji', '1ljh', '1ljk', '1ljj', '1f0w', '1bgi', '2vb1', '1jj3', '1hsw', '1jj1', '1rcm', '1hsx', '1lys', '1f10', '1vdp',
##    ## P 43 21 2
##    '1bwh', '1bwi', '1hc0', '1dpx', '3exd', '2cgi', '1qio', '6lyz', '6lyt', '1lpi', '2w1y', '3lyz', '1yl0', '193l', '5lyt', '1ykx', '2aub', '1c10', '2epe', '3lym', '1vau', '1vat', '2w1l', '2w1m', '8lyz', '1z55', '1jit', '1azf', '2a7d', '1uig', '1lza', '1iee', '5lyz', '2d91', '2w1x', '1bwj', '2g4q', '2g4p', '2blx', '4lyz', '2cds', '1lsf', '1dpw', '1lsd', '1lse', '1lsb', '1lsc', '1lsa', '4lyo', '1vdt', '4lym', '1bvx', '1hel', '1vds', '2yvb', '2c8p', '1bhz', '2c8o', '1jiy', '1lyo', '1lz9', '1lz8', '2lym', '2bly', '1jis', '1lyz', '194l', '2lyz', '2a7f', '1rfp',
####    '2hso', '2hs9', '2hs7', ## powder diffraction
####    '2a6u', ## powder diffraction
####    '1ja2', '1ja6', '1ja4', ## powder diffraction
####    '1b2k', ## iodide ions
##    ]
##d_mutants = {'1uif': 14, '1fn5': 48, '1kxw': 26, '1fly': 101, '1ir7': 77, '1flu': 66, '1ir9': 97, '1flw': 70, '1uid': 14, '1flq': 116, '1kxy': 17, '1uie': 14, '1ir8': 57, '1iot': 11, '1ios': 11, '1hem': 90, '1uic': 14, '1heo': 54, '1her': 39, '1lzd': 61}
##l_mutants = d_mutants.keys()

d_spacegroups = {}
d_spacegroups_reverse = {}
d_starting_model = { ## k=model,v=pdbs
##    '8lyz':['2cds',],
##    '5lym':['1lcn',],
    }
d_starting_model_reverse = { ## k=pdb,v=model
##    '1lcn':'5lym','2cds':'8lyz',
    }
d_ph = {}
d_ph_reverse = {}
d_temperature = {}
d_temperature_reverse = {}
d_authors = {}
d_authors_reverse = {}

def main():

    (
        l_wts, l_mutants,
        d_coordinates, d_ph,
        d_starting_model, d_starting_model_reverse,
        d_spacegroups, d_spacegroups_reverse,
        d_authors, d_authors_reverse,
        ) = parse_pdb()

##    l_pdbs = d_coordinates.keys()
##    l_pdbs.sort()
##    l_wts = l_pdbs
    l_pdbs = l_wts+l_mutants

    if bool_mutants == False:
        l_pdbs = l_wts ## tmp!!!
        l_mutants = [] ## tmp!!!

    (
        d_starting_model, d_starting_model_reverse,
        ) = trace_starting_model(d_starting_model,d_starting_model_reverse,)

    l_pdbs_starting_model_grouped = group_pdbs(d_starting_model,l_pdbs,)
    l_pdbs_spacegroup_grouped = group_pdbs(d_spacegroups,l_pdbs,)
    l_pdbs_ph_grouped = group_pdbs(d_ph,l_pdbs,)
    l_pdbs_temperature_grouped = group_pdbs(d_temperature,l_pdbs,)
    l_pdbs_author_grouped = group_pdbs(d_authors,l_pdbs,)
    if len(l_pdbs_spacegroup_grouped) == 0:
        print d_spacegroups
        print d_spacegroups_reverse
        stop

    print 'calculate rmsds'
    d_rmsds = {}
    for i1 in range(len(l_pdbs)):
        pdb1 = l_pdbs[i1]
        print 'calc rmsd', i1, len(l_pdbs)-1
        coords1 = d_coordinates[pdb1]
        for i2 in range(len(l_pdbs)):
            if i2 <= i1:
                continue
            pdb2 = l_pdbs[i2]
            coords2 = d_coordinates[pdb2]
            if len(coords1) != len(coords2):
                print pdb1, len(coords1)
                print pdb2, len(coords2)
                print 'wt', len(d_wts[cluster]['seq'])
                stop
            c1 = []
            c2 = []
            for i in range(len(coords1)):
                if coords1[i] == None:
                    continue
                if coords2[i] == None:
                    continue
                c1 += [coords1[i]]
                c2 += [coords2[i]]
            rmsd = instance_geometry.superpose(c1,c2,)
##            rmsd = 1

            if not pdb1 in d_rmsds.keys():
                d_rmsds[pdb1] = {}
            d_rmsds[pdb1][pdb2] = rmsd

            if not pdb2 in d_rmsds.keys():
                d_rmsds[pdb2] = {}
            d_rmsds[pdb2][pdb1] = rmsd

            continue


    fd = open('%s_rmsds.txt' %(cluster),'w')
    fd.write('%s' %(d_rmsds))
    fd.close()


    suffix = 'cluster%i' %(cluster)
    ## plot spacegroup if representative space group unknown
    if d_wts[cluster]['spacegroup'] == '':
        plot(d_rmsds,l_pdbs_spacegroup_grouped,d_spacegroups_reverse,'a_spacegroup',suffix,l_wts,)
    plot(d_rmsds,l_pdbs_ph_grouped,d_ph_reverse,'b_ph',suffix,l_wts,)
    plot(d_rmsds,l_pdbs_temperature_grouped,d_temperature_reverse,'c_temperature',suffix,l_wts,)
    plot(d_rmsds,l_pdbs_author_grouped,d_authors_reverse,'e_authors',suffix,l_wts,)
    plot(d_rmsds,l_pdbs_starting_model_grouped,d_starting_model_reverse,'g_start_model',suffix,l_wts,)

    d_wtmut = {}
    for pdb in l_mutants:
        d_wtmut[pdb] = 'mutant'
    for pdb in l_wts:
        d_wtmut[pdb] = 'wt'
    plot(d_rmsds,l_wts+l_mutants,d_wtmut,'0_wt_v_mutant',suffix,l_wts,) ## temporary

    return


def plot(d_rmsds,l_pdbs_grouped,d_reverse,prefix,fn_suffix,l_wts,):

    print 'plot'

    l_data = []
    d_xtics = {}
    for i1 in range(len(l_pdbs_grouped)):
        pdb1 = l_pdbs_grouped[i1]
        if pdb1 in l_wts:
            suffix = 'wt'
        else:
            suffix = 'mutant'
        d_xtics['%10s %s %s' %(d_reverse[pdb1],pdb1.replace('_',':'),suffix,)] = i1+.5
        for i2 in range(len(l_pdbs_grouped)):
            pdb2 = l_pdbs_grouped[i2]
            if pdb1 == pdb2:
                rmsd = 0
##            elif pdb1 not in d_rmsds.keys(): ## tmp!!
##                rmsd = 0
##            elif pdb2 not in d_rmsds[pdb1].keys(): ## tmp!!
##                rmsd = 0
            else:
                rmsd = d_rmsds[pdb1][pdb2]
            l_data += ['%i %i %f\n' %(i1,i2,rmsd,)]
        l_data += ['%i %i %f\n' %(i1,i2+1,rmsd,)]
        l_data += ['\n',]
    for i2 in range(len(l_pdbs_grouped)):
        l_data += ['%i %i %f\n' %(i1+1,i2,rmsd,)]
    l_data += ['%i %i %f\n' %(i1+1,i2+1,rmsd,)]
    gnuplot_prefix = '%s_%s_%s_%s_%s_%s' %(fn_suffix,method,'ligands%s' %(bool_ligands),'mutants%s' %(bool_mutants),d_wts[cluster]['spacegroup'].replace(' ',''),prefix,)
    gnuplot.contour_plot(
        gnuplot_prefix, l_data,
        d_xtics=d_xtics, d_ytics=d_xtics,
        title = d_wts[cluster]['name']
##        z1=0, z2=1.5,
##        bool_remove = False,
        )

    os.system('mv %s.png sphere/.' %(gnuplot_prefix,))

    return


def parse_pdb():

    l_wts = []
    l_mutants = []

    d_mmCIF_main = {}
    for i_pdb in range(len(l_pdbs)):
        pdb = l_pdbs[i_pdb]
##        if i_pdb < 311:
##            continue
##        print i_pdb, pdb
        if pdb[:4] in d_mmCIF_main.keys():
            continue
        d_mmCIF_main[pdb[:4]] = parse_mmCIF.main(pdb[:4],)
        if '_pdbx_entity_nonpoly.comp_id' in d_mmCIF_main[pdb[:4]].keys():
            if len(
                set(d_mmCIF_main[pdb[:4]]['_pdbx_entity_nonpoly.comp_id'])
                &
                set([
##                    'IOD','SCN',
                    'NAG','NDG',
##                    'URE',
##                    'CL',
##                    'BR',
                    ])
                ) > 0:
                print pdb, d_mmCIF_main[pdb[:4]]['_pdbx_entity_nonpoly.comp_id']
            if pdb[:4] in ['1gwd']: ## CMO should be EDO...
                pass
            elif cluster == 9 and len(
                set(d_mmCIF_main[pdb[:4]]['_pdbx_entity_nonpoly.comp_id'])
                -
                set([
                    ## ignore
                    'HOH','DOD',
                    'ARG',
                    'CL','BR',
                    'NA','PO4','XE','NO3','EDO','SO4','NI','NH4','MN',
                    'BME','FMT','TRS','MPD','MRD','ACY','ACT','GOL',
                    'EOH','IPA','PG4','DMS',
                    ## ignore (not usually ignored)
                    'SUC', ## no effect on 1jj0
                    'BGS', ## no effect on 2b5z
                    'URE', ## no effect on 2f30
                    'TOU', ## no effect on 2f4a
                    'TAR', ## might have a small effect on 2hub?
                    'ASR','RU7','CPT','CCN','HDZ',
                    'MM1','MM2','MM5','MM6',
                    'DO3','GD','KR','HO3','HO','EU',
                    '1BO','PTL','PE9','ETF','AZI','202','BRJ','220','EPE',
                    'PPI','PDC','TFS','1PG','GM1','AYE','I3C','SDS','TSU',
                    'CMO', ## part of tricarbonylmanganese in 2q0m
                    ## don't ignore
                    'IOD', ## effect on 1b2k
                    'NAG','NDG', ## 1ja2 effect
                    ## don't ignore (usually ignore)
                    'SCN', ## effect on 1lcn:b (not 1lcn:a) - loop 67-73, GLY67
                    ])
                ) > 0:
                print d_mmCIF_main[pdb[:4]]['_pdbx_entity_nonpoly.comp_id']
                print d_mmCIF_main[pdb[:4]]['_exptl.method']
                print pdb
                stop

    d_coordinates = {}
    for i_pdb in range(len(l_pdbs)):
        pdb = l_pdbs[i_pdb]

##        d_mmCIF = parse_mmCIF.main(pdb[:4],)
        d_mmCIF = d_mmCIF_main[pdb[:4]]

        ## not an x-ray structure
        if d_mmCIF['_exptl.method'] != ['X-RAY DIFFRACTION']:
            continue

        ## more than one type of polymer present
        if len(d_mmCIF_main[pdb[:4]]['_entity_poly.pdbx_strand_id']) > 1:
            continue

        ## selected ligands present
        if bool_ligands == False:
            if '_pdbx_entity_nonpoly.comp_id' in d_mmCIF_main[pdb[:4]].keys():
                if len(
                    set(d_mmCIF_main[pdb[:4]]['_pdbx_entity_nonpoly.comp_id'])
                    &
                    set([
                        'IOD','NAG','NDG','SCN',
                        ])
                    ) > 0:
                    continue

        ## number of residues with identical chainID
        len_seq = 0
        for pdb_strand_id in d_mmCIF['_pdbx_poly_seq_scheme.pdb_strand_id']:
            if pdb_strand_id.lower() == pdb[-1]:
                len_seq += 1
        
        if cluster == 61:
            if len_seq != 149:
                print len(d_mmCIF['_pdbx_poly_seq_scheme.auth_seq_num'])
                continue
        else:
            if len_seq != len(d_wts[cluster]['seq']):
                print pdb, 'skipping because len is', len(d_mmCIF['_pdbx_poly_seq_scheme.auth_seq_num']),
                print 'should be', len(d_wts[cluster]['seq'])
                continue

        ## more than 1 mutation?
        n_mutations = 0
        for i in range(len(d_wts[cluster]['seq'])):
            if d_wts[cluster]['seq'][i] != d_mmCIF['_entity_poly.pdbx_seq_one_letter_code'][0][i]:
                n_mutations += 1
        if n_mutations > 1:
            continue

        ## space group
        if d_wts[cluster]['spacegroup'] != '':
            if d_mmCIF['_symmetry.space_group_name_H-M'] != [d_wts[cluster]['spacegroup']]:
                continue

        d_coords = {}
        for i in range(len(d_mmCIF['_atom_site.label_atom_id'])):
            if method == 'alpha':
                ## alpha carbon
                if d_mmCIF['_atom_site.label_atom_id'][i] != 'CA':
                    continue
            elif method == 'heavy':
                ## heavy atoms
                if d_mmCIF['_atom_site.type_symbol'][i] == 'H':
                    continue
            else:
                print method
                stop
            ## chain
            if d_mmCIF['_atom_site.auth_asym_id'][i] != pdb[-1].upper():
                continue
            if d_mmCIF['_atom_site.group_PDB'][i] == 'HETATM': ## not used for modres...
                continue
            ## altloc
            if d_mmCIF['_atom_site.label_alt_id'][i] not in ['.','A',]:
                continue
            res_no = int(d_mmCIF['_atom_site.label_seq_id'][i])
            if res_no < 1 or res_no > len(d_wts[cluster]['seq']):
                print pdb, res_no, len(d_wts[cluster]['seq'])
                print d_mmCIF['_atom_site.auth_asym_id'][i]
                stop
            x = float(d_mmCIF['_atom_site.Cartn_x'][i])
            y = float(d_mmCIF['_atom_site.Cartn_y'][i])
            z = float(d_mmCIF['_atom_site.Cartn_z'][i])
            coord = numpy.array([x,y,z,])
            d_coords[res_no] = coord ## WILL NOT WORK FOR HEAVY ATOMS!!!!!!!!!!!!!!!!!!!
        l_coordinates = []
        for res_no in range(1,1+len_seq):
            if res_no in d_coords.keys():
                l_coordinates += [d_coords[res_no],]
            else:
                l_coordinates += [None,]
            
        fd = open('/data/pdb-v3.2/%s/pdb%s.ent' %(pdb[1:3],pdb[:4],),'r')
        lines = fd.readlines()
        fd.close()
##        l_coordinates = []
        for i_line in range(len(lines)):
            line = lines[i_line]
            record = line[:6].strip()
##            if record == 'ATOM':
##                chain = line[21]
##                if chain.lower() != pdb[-1]:
##                    continue
##                atom_name = line[12:16].strip()
##                if atom_name != 'CA':
##                    continue
##                altloc = line[16]
##                if altloc not in [' ','A',]:
##                    continue
##                x = float(line[30:38])
##                y = float(line[38:46])
##                z = float(line[46:54])
##                coord = numpy.array([x,y,z,])
##                l_coordinates += [coord]
            if record == 'REMARK':
                remark = int(line[6:10])
                if remark == 200:
                    if line[12:44] == 'PH                             :':
                        s = line[44:].strip()
                        if s == 'NULL':
                            ph = 'NULL'
                        else:
                            if '-' in s:
                                ph = average_physprop(s,'-',)
                            ## should be in a function
                            elif ';' in s:
                                ph = average_physprop(s,';',)
                            else:
                                ph = float(s)
                            ph = round(ph,0)
                        if not ph in d_ph.keys():
                            d_ph[ph] = []
                        d_ph[ph] += [pdb]
                        d_ph_reverse[pdb] = ph
                    elif line[12:44] == 'TEMPERATURE           (KELVIN) :':
                        s = line[44:].strip()
                        ## should be in a function
                        if ' NULL' in s:
                            temperature = 'NULL'
                        elif ';' in s:
                            temperature = average_physprop(s,';',)
                            temperature = int(10*round(float(temperature)/10.))
                        elif s == 'NULL':
                            temperature = 'NULL'
                        else:
                            temperature = int(10*round(float(s)/10.))
                        if not temperature in d_temperature.keys():
                            d_temperature[temperature] = []
                        d_temperature[temperature] += [pdb]
                        d_temperature_reverse[pdb] = temperature
                    elif line[11:26] == 'STARTING MODEL:':
                        if pdb == '1lcn': ## not parsable
                            continue
                        if pdb == '2cds': ## not parsable
                            continue
                        l_starting_models = line[27:].replace('PDB ENTRY','').replace('.PDB','').lower().split(',')
                        l_starting_models_clean = []
                        for s_starting_model in l_starting_models:
                            s_starting_model = s_starting_model.strip()
                            if s_starting_model == '8lys': ## 8lys does not exist
                                s_starting_model = 'null'
                            if len(s_starting_model) != 4:
##                                print pdb, s_starting_model
                                s_starting_model = pdb
                            if s_starting_model == 'none':
                                s_starting_model = pdb
                            if not s_starting_model in d_starting_model.keys():
                                d_starting_model[s_starting_model] = []
                            d_starting_model[s_starting_model] += [pdb]
                            l_starting_models_clean += [s_starting_model]
    ##                    l_starting_models = [s_starting_model.strip() for s_starting_model in l_starting_models]
                        d_starting_model_reverse[pdb] = l_starting_models_clean
##                elif remark == 280:
            elif record == 'AUTHOR':
                l_authors = line[10:].strip().split(',')
            elif record == 'ENDMDL':
                break
            elif record == 'CRYST1':
                spacegroup = line[55:66].strip()
                if not spacegroup in d_spacegroups.keys():
                    d_spacegroups[spacegroup] = []
                d_spacegroups[spacegroup] += [pdb]
                d_spacegroups_reverse[pdb] = spacegroup
        d_coordinates[pdb] = l_coordinates
        if not pdb in d_starting_model_reverse.keys():
            d_starting_model_reverse[pdb] = [pdb]
            if not pdb in d_starting_model.keys():
                d_starting_model[pdb] = []
            d_starting_model[pdb] += [pdb]
        d_authors_reverse[pdb] = l_authors
##        if not l_authors[-1] in d_authors_reverse.keys():
##            d_authors_reverse[l_authors[-1]] = []
##        d_authors_reverse[l_authors[-1]] += [pdb]

        if d_mmCIF_main[pdb[:4]]['_entity_poly.pdbx_seq_one_letter_code'] == [d_wts[cluster]['seq']]:
            l_wts += [pdb]
        else:
            l_mutants += [pdb]
            if pdb == '1v7s_a':
                print d_mmCIF_main[pdb[:4]]['_entity_poly.pdbx_seq_one_letter_code']
                print d_wts[cluster]['seq']
                stopstop

    l_set_authors = []
    for pdb in d_authors_reverse.keys():
        shared = False
        for i in range(len(l_set_authors)):
            set_authors = l_set_authors[i]
            if len(set(d_authors_reverse[pdb]) & set_authors) > 0:
##                l_set_authors[i] |= set(d_authors[pdb])
                l_set_authors[i] &= set(d_authors_reverse[pdb])
                shared = True
##                if set(d_authors[pdb]) != set_authors:
##                    print d_authors[pdb]
##                    print set_authors
##                    print l_set_authors[i]
##                    stop
                break
        if shared == False:
            l_set_authors += [set(d_authors_reverse[pdb])]

    d_authors_reverse2 = {}
    for pdb in d_authors_reverse.keys():
        for i in range(len(l_set_authors)):
            if len( set(d_authors_reverse[pdb]) & l_set_authors[i] ) > 0:
                d_authors_reverse2[pdb] = i
                if not i in d_authors.keys():
                    d_authors[i] = []
                d_authors[i] += [pdb]
                break

    del d_mmCIF_main

    return (
        l_wts, l_mutants,
        d_coordinates, d_ph,
        d_starting_model, d_starting_model_reverse,
        d_spacegroups, d_spacegroups_reverse,
        d_authors, d_authors_reverse2,
        )


def trace_starting_model(d_staring_model,d_starting_model_reverse,):

    print 'trace starting model'

    for k in d_starting_model.keys():
        k1 = k
        while True:
            if k1 == 'null' or len(k1) > 4 or k1 == '2lzh' or k1 == 'none':
                if k1 != k:
                    print k, k1, k2
                    stop
                break
            if not k1 in d_starting_model_reverse.keys():
                k2 = [k1]
            else:
                k2 = d_starting_model_reverse[k1]
            if len(k2) == 1:
                k2 = k2[0]
            else:
                print k2
                stop
            if k1 == k2 or k2 == 'null' or len(k2) > 4 or k2 == '2lzh' or k2 == 'none':
                if k1 != k:
                    print k, k1, k2
                    d_starting_model[k1] += d_starting_model[k]
                    del d_starting_model[k]
                break
            else:
                k1 = k2

    d_starting_model_reverse = {}
    for starting_model,pdbs in d_starting_model.items():
        for pdb in pdbs:
            if not pdb in d_starting_model_reverse.keys():
                d_starting_model_reverse[pdb] = []
            d_starting_model_reverse[pdb] += [starting_model]

    return d_starting_model, d_starting_model_reverse


def group_pdbs(d,l_pdbs,):

##    ## sort by count
##    l = [[len(d[s]),s,] for s in d.keys()]
##    l.sort()
    ## sort alphabetically
    l = [[s,s,] for s in d.keys()]
    l.sort()

    l_pdbs_grouped = []
    for s in l:
        l_pdbs_group = d[s[1]]
        l_pdbs_group.sort()
        for pdb in l_pdbs_group:
            if not pdb in l_pdbs:
                continue
            l_pdbs_grouped += [pdb]

    return l_pdbs_grouped


def average_physprop(s,delimiter,):

    l = s.split(delimiter)
    if len(l) != 2:
        stop
    Sum = 0
    for s_val in l:
        Sum += float(s_val)
    average = Sum/len(l)
    
    return average


def find_min_rmsd(d_coordinates,):

##d_min_rmsd = {}
##for pdb_mutant in l_mutants:
##    coords_mutant = d_coordinates[pdb_mutant]
##    min_rmsd = [9.,None,]
##    l_rmsds = []
##    for pdb_wt in l_wts:
##        coords_wt = d_coordinates[pdb_wt]
##        rmsd = instance_geometry.superpose(coords_mutant,coords_wt,)
##        if rmsd < min_rmsd[0]:
##            min_rmsd = [rmsd,pdb_wt,]
##        if rmsd < 0.15:
##            l_rmsds += [pdb_wt]
##    d_min_rmsd[pdb_mutant] = min_rmsd
####    print pdb_mutant, min_rmsd
##    print pdb_mutant, l_rmsds
##print d_min_rmsd

    return

if __name__ == '__main__':
    main()
