import numpy, math, os, statistics, sys

l_backbone_atoms = [
    'N','H','H1','H2','H3', ## H3 if N-terminal (H,HXT in PDB)
    'CA','HA','HA2', ## HA2 if Gly (HA3 in PDB)
    'C','O','OC1','OC2', ## OC1,OC2 if C-terminal (O,OXT in PDB)
    ]

def main():

    cwd = os.getcwd()[-6:]

    ## parse charges
    d_charges = parse_charges_from_topology_file()

##    l_atoms1 = list(set(d_charges[35].keys())-set(l_backbone_atoms))
##    Min = -450
##    Max = 250

    ## calculate energies
    d_coords = parse_coords_from_trajectory_file(d_charges,cwd,)

    ## calculate statistics
    calculate_averages_and_plot(cwd,)

    return


def parse_charges_from_topology_file():

    cwd = os.getcwd()

    d_charges = {}
    for cwd in ['NEUNEU','NEUCHA','CHANEU','CHACHA',]:

        fd = open('/local/tc/MD_2vb1/amber99sb_CYM/%s/2vb1.top' %(cwd),'r')
    ##    fd = open('../MD_2vb1_Glu35Asp52_%s/2vb1.top' %(topology),'r')
        lines = fd.readlines()
        fd.close()

        d_charges[cwd] = {}
        for i in range(len(lines)):
            if lines[i].strip() == '[ atoms ]':
                for j in range(i+2,len(lines)):
                    if lines[j].strip() == '':
                        break
                    charge = float(lines[j].split()[6])
                    res_no = int(lines[j].split()[2])
                    atom_name = lines[j].split()[4]
                    if not res_no in d_charges[cwd].keys():
                        d_charges[cwd][res_no] = {}
                    if atom_name in d_charges[cwd][res_no].keys():
                        stop
                    d_charges[cwd][res_no][atom_name] = charge
    ##                atom_no = int(lines[j].split()[0])
    ##                d_charges[atom_no] = charge

    return d_charges


def calculate_averages_and_plot(topology,):

    import statistics

    print 'calculate averages and plot'

    fd = open('energies_%s.txt' %(topology),'r')
    lines = fd.readlines()
    fd.close()

    lines2 = []
    l_asp52 = []
    l_protein = []
    l_chloride = []
    l_water = []
    l_sum = []
    l_sum_excl_ions = []
    l_stddev = []
    l_cumavg = []
    l_ma100 = []
    l_ma100_cumavg_diff = []
    l_stddev_2ns = []
    if not os.path.isfile('energies_averages_%s.txt' %(topology)):
        for line in lines:
            i = int(line.split()[0])
            if i % 1000 == 0:
                print i
    ##        if i < 100:
    ##            continue
            l_asp52 += [float(line.split()[1])]
            l_protein += [float(line.split()[2])]
            l_chloride += [float(line.split()[3])]
            l_water += [float(line.split()[4])]
            l_sum += [
                float(line.split()[1])+
                float(line.split()[2])+
                float(line.split()[3])+
                float(line.split()[4])
                ]
            l_sum_excl_ions += [
                float(line.split()[1])+
                float(line.split()[2])+
                float(line.split()[4])
                ]
            l_cumavg += [sum(l_sum)/len(l_sum)]
            if len(l_sum) <= 1:
                average = 0
                stddev = 0
                stddev_excl_ions = 0
                stddev_asp52 = stddev_protein = stddev_chloride = stddev_water = 0
            else:
                average,stddev = statistics.stderr(l_sum)
                average_excl_ions,stddev_excl_ions = statistics.stderr(l_sum_excl_ions)
                average_asp52,stddev_asp52 = statistics.stderr(l_asp52)
                average_protein,stddev_protein = statistics.stderr(l_protein)
                average_chloride,stddev_chloride = statistics.stderr(l_chloride)
                average_water,stddev_water = statistics.stderr(l_water)
            if len(l_sum_excl_ions) >= 100:
                average,stddev_excl_ions_local = statistics.stderr(l_sum_excl_ions[-100:])
            else:
                stddev_excl_ions_local = 0
            if len(l_sum) >= 100:
                average = sum(l_sum)/len(l_sum)
                ma100 = sum(l_sum[-100:])/100.
                sum_sqdiff = 0
                for x in l_sum[-100:]:
                    sum_sqdiff += (x-average)**2
                l_ma100 += [ma100]
                l_ma100_cumavg_diff += [average-ma100]
            else:
                stddev_from_cum_average = 0
                ma100 = sum(l_sum)/len(l_sum)
                l_ma100 += [0]
                l_ma100_cumavg_diff += [0]
            if len(l_ma100) >= 200:
                average,ma100_stddev = statistics.stderr(l_ma100[-100:])
            else:
                ma100_stddev = 0
            if len(l_cumavg) > 100:
                average,stddev_cumavg = statistics.stderr(l_cumavg)
    ##            print l_cumavg[-1],stddev_cumavg
            else:
                stddev_cumavg = 0
            if len(l_sum) >= 500:
                ma500 = sum(l_sum[-500:])/500.
            else:
                ma500 = sum(l_sum)/len(l_sum)

            ## stddev 2ns
            if i >= 1000:
                x,stddev_2ns = statistics.stderr(l_sum_excl_ions[i-1000:i])
            else:
                stddev_2ns = 'N/A'
                
            
            lines2 += [
                '%i %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s\n' %(
                    i, ## 1
                    sum(l_asp52)/len(l_asp52),
                    sum(l_protein)/len(l_protein),
                    sum(l_chloride)/len(l_chloride),
                    sum(l_water)/len(l_water),
                    stddev, ## 6
                    stddev_asp52,
                    stddev_protein,
                    stddev_chloride,
                    stddev_water,
                    stddev_excl_ions, ## 11
                    sum(l_sum_excl_ions)/len(l_sum_excl_ions), ## 12
                    sum(l_sum)/len(l_sum), ## 13
                    stddev_excl_ions_local,
                    stddev_from_cum_average,
                    ma100, ## 16
                    ma100_stddev,
                    stddev_cumavg,
                    ma500,
                    stddev_2ns, ## 20
                    )
                ]

        fd = open('energies_averages_%s.txt' %(topology),'w')
        fd.writelines(lines2)
        fd.close()

    fd = open('energies_averages_%s.txt' %(topology),'r')
    lines2 = fd.readlines()
    fd.close()
    average = float(lines2[-1].split()[12])
    print '******** average', average
    print '******** stddev', lines2[-1].split()[5]
    ## calculate rmsd
    l_diff = []
    for i in range(len(lines)):
        Sum = float(line.split()[1])+float(line.split()[2])+float(line.split()[3])+float(line.split()[4])
        l_diff += [Sum-average]
    rmsd = statistics.rmsd(l_diff)
    print '******** rmsd', rmsd

    if len(l_sum) > 0:
        print 'correl asp52', statistics.correlation(l_sum,l_asp52)
        print 'correl protein', statistics.correlation(l_sum,l_protein)
        print 'correl chloride', statistics.correlation(l_sum,l_chloride)
        print 'correl water', statistics.correlation(l_sum,l_water)
        print
        print 'correl asp52', statistics.correlation(l_sum_excl_ions,l_asp52)
        print 'correl protein', statistics.correlation(l_sum_excl_ions,l_protein)
        print 'correl chloride', statistics.correlation(l_sum_excl_ions,l_chloride)
        print 'correl water', statistics.correlation(l_sum_excl_ions,l_water)


    ## data+average
    d_plots = {
        'E_overall':{
            'scatter':{'column':'($2+$3+$4+$5)','title':'E overall %s' %(topology),},
            'line':{'stddev':'($2+$3+$4+$5-$6)','stddev':'($2+$3+$4+$5+$6)',},
            'average':{'column':13,'title':'cum average',},
            },
####        'E_Asp52side':{
####            'scatter':['2',],
####            'line':{'stddev':'($2-1.6449*$7)','stddev':'($2+1.6449*$7)',},
####            },
####        'E_protein':{
####            'scatter':['3',],
####            'line':{'stddev':'($3-1.6449*$8)','stddev':'($3+1.6449*$8)',},
####            },
####        'E_chloride':{
####            'scatter':['4',],
####            'line':{'stddev':'($4-1.6449*$9)','stddev':'($4+1.6449*$9)',},
####            },
####        'E_water':{
####            'scatter':['5',],
####            'line':{'stddev':'($5-1.6449*$10)','stddev':'($5+1.6449*$10)',},
####            },
####        'E_overall_exclions':{
####            'scatter':['($2+$3+$5)',],
####            'line':{'stddev':'($2+$3+$5-1.6449*$11)','stddev':'($2+$3+$5+1.6449*$11)',},
####            },
####        'E_overall_exclions_localstddev':{
####            'scatter':['($2+$3+$5)',],
####            'line':{'stddev':'($2+$3+$5-1.6449*$14)','stddev':'($2+$3+$5+1.6449*$14)',},
####            },
##        'E_overall_w_ma':{
##            'scatter':['($2+$3+$4+$5)',],
##            'line':{
####                'cumulated average':'($13)',
##                'ma2ns':'($16)',
##                'ma2ns - stddev':'($16-$17)',
##                'ma2ns + stddev':'($16+$17)',
##                'cumulated average - stddev':'($13-$18)',
##                'cumulated average + stddev':'($13+$18)',
##                'ma10ns':'($19)',
##                },
##            },
        'stddev2ns':{
            'scatter':{'column':'($2+$3+$5)','title':'E excl ions',},
            'average':{'column':12,'title':'cum average excl ions',},
            'line':{'-stddev 2ns':'($12-$20)','+stddev 2ns':'($12+$20)',},
            },
        }

    for plot in d_plots.keys():
        print 'plot', plot
        lines = [
            'set terminal postscript eps enhanced color "Helvetica" 48\n',
            'set size 4,4\n',
            'set mytics 10\n',
            'set grid xtics ytics mytics\n',
            'set output "%s_%s.ps"\n' %(plot,topology),
            'set xlabel "20ps time step"\n',
            'set ylabel "E / kT"\n',
            'set title "%s"\n' %(plot),
            ]
##        line = 'plot [0:][%s:%s]"energies_%s.txt" u 1:%s, "energies_averages_%s.txt" u 1:%s w l, ' %(
##            Min,Max,topology,d_plots[plot]['scatter'][0],topology,d_plots[plot]['scatter'][0],
##            )
##        line = 'plot [0:]"energies_%s.txt" u 1:%s, "energies_averages_%s.txt" u 1:%s w l lw 8, ' %(
##            topology,d_plots[plot]['scatter'][0],topology,d_plots[plot]['scatter'][0],
##            )
        line = 'plot [0:]"energies_%s.txt" u 1:%s t "%s", "energies_averages_%s.txt" u 1:%s w l lw 8 t "%s", ' %(
            topology,d_plots[plot]['scatter']['column'],d_plots[plot]['scatter']['title'],topology,d_plots[plot]['average']['column'],d_plots[plot]['average']['title'],
            )
        for k in d_plots[plot]['line'].keys():
            line += '"energies_averages_%s.txt" u 1:%s w l lw 8 t "%s", ' %(topology,d_plots[plot]['line'][k],k,)
        line = line[:-2]+'\n'
        lines += [line]
        
        fd = open('gnu.set','w')
        fd.writelines(lines)
        fd.close()

        os.system('gnuplot gnu.set')

        os.system('convert %s_%s.ps %s_%s.png' %(plot,topology,plot,topology,))


    ## stddev
    d_plots = {
##        'stddev_overall':['6',],
##        'stddev_excl_ions':['11',],
##        'stddev_excl_ions_local':['14',],
##        'stddev_from_cum_average':['15',],
        }

    for plot in d_plots.keys():
        print 'plot', plot
        lines = [
            'set terminal png\n',
            'set output "%s_%s.png"\n' %(plot,topology,),
            'set xlabel "20ps time step"\n',
            'set ylabel "E / kT"\n',
            'set title "%s"\n' %(plot),
            ]
        line = 'plot [0:]"energies_averages_%s.txt" u 1:%s w l, ' %(topology,d_plots[plot][0],)
        line = line[:-2]+'\n'
        lines += [line]
        
        fd = open('gnu.set','w')
        fd.writelines(lines)
        fd.close()

        os.system('gnuplot gnu.set')


    ##
    ## combined plot
    ##
    print 'combined plot'
    lines = [
        'set terminal postscript eps enhanced color "Helvetica" 18\n',
        'set size 3,3\n',
        'set output "%s.ps"\n' %('combined'),
        'set xlabel "2 ps time step"\n',
        'set ylabel "E / kT"\n',
        'set title "%s"\n' %('combined'),
        ]
    line = 'plot [0:][%s:%s]' %(Min,Max,)
    ## data points
    line += '"../NEUCHA/energies_NEUCHA.txt" u 1:%s lc 1 ps 1 t "NEUCHA", ' %('($2+$3+$5+$4)',)
    line += '"../NEUNEU/energies_NEUNEU.txt" u 1:%s lc 2 ps 1 t "NEUNEU", ' %('($2+$3+$5+$4)',)
    line += '"../CHANEU/energies_CHANEU.txt" u 1:%s lc 3 ps 1 t "CHANEU", ' %('($2+$3+$5+$4)',)
    line += '"../CHACHA/energies_CHACHA.txt" u 1:%s lc 4 ps 1 t "CHACHA", ' %('($2+$3+$5+$4)',)
    ## lines
    line += '"../NEUCHA/energies_averages_NEUCHA.txt" u 1:%s w l lt 1 lc 5 lw 16 t "NEUCHA average", ' %('($2+$3+$5+$4)',)
    line += '"../NEUNEU/energies_averages_NEUNEU.txt" u 1:%s w l lt 1 lc 6 lw 16 t "NEUNEU average", ' %('($2+$3+$5+$4)',)
    line += '"../CHANEU/energies_averages_CHANEU.txt" u 1:%s w l lt 1 lc 7 lw 16 t "CHANEU average", ' %('($2+$3+$5+$4)',)
    line += '"../CHACHA/energies_averages_CHACHA.txt" u 1:%s w l lt 1 lc 8 lw 16 t "CHACHA average", ' %('($2+$3+$5+$4)',)
##    ## other lines (+/- stddev)
##    line += '"../NEUCHA/energies_averages_NEUCHA.txt" u 1:%s w l lc 2, ' %('($2+$3+$5-$14)',)
##    line += '"../NEUCHA/energies_averages_NEUCHA.txt" u 1:%s w l lc 2, ' %('($2+$3+$5+$14)',)
##    line += '"../NEUNEU/energies_averages_NEUNEU.txt" u 1:%s w l lc 3, ' %('($2+$3+$5-$14)',)
##    line += '"../NEUNEU/energies_averages_NEUNEU.txt" u 1:%s w l lc 3, ' %('($2+$3+$5+$14)',)
    line = line[:-2]+'\n'
    lines += [line]
    
    fd = open('gnu.set','w')
    fd.writelines(lines)
    fd.close()

    os.system('gnuplot gnu.set')
    os.system('convert combined.ps combined.png')



    ##
    ## combined plot 2
    ##
    for combination in [['CHACHA','CHANEU',],['NEUCHA','NEUNEU',],]:

        print 'combined plot'
        lines = [
            'set terminal postscript eps enhanced color "Helvetica" 18\n',
            'set size 3,3\n',
            'set output "%s.ps"\n' %('combined2'),
            'set xlabel "2 ps time step"\n',
            'set ylabel "E / kT"\n',
            'set title "%s"\n' %('%s v %s' %(combination[0],combination[1],)),
            ]
        line = 'plot [0:][%s:%s]' %(Min,Max,)
        ## data points
        line += '"../%s/energies_%s.txt" u 1:%s lc 3 t "%s protein", ' %(combination[0],combination[0],'($3)',combination[0],)
        line += '"../%s/energies_%s.txt" u 1:%s lc 4 t "%s protein", ' %(combination[1],combination[1],'($3)',combination[1],)
        line += '"../%s/energies_%s.txt" u 1:%s lc 5 t "%s water", ' %(combination[0],combination[0],'($5)',combination[0],)
        line += '"../%s/energies_%s.txt" u 1:%s lc 6 t "%s water", ' %(combination[1],combination[1],'($5)',combination[1],)
        line += '"../%s/energies_%s.txt" u 1:%s lc 1 t "%s Asp52", ' %(combination[0],combination[0],'($2)',combination[0],)
        line += '"../%s/energies_%s.txt" u 1:%s lc 2 t "%s Asp52", ' %(combination[1],combination[1],'($2)',combination[1],)
        line += '"../%s/energies_averages_%s.txt" u 1:%s w l lt 1 lc 3 lw 16 t "%s protein average", ' %(combination[0],combination[0],'($3)',combination[0],)
        line += '"../%s/energies_averages_%s.txt" u 1:%s w l lt 1 lc 4 lw 16 t "%s protein average", ' %(combination[1],combination[1],'($3)',combination[1],)
        line += '"../%s/energies_averages_%s.txt" u 1:%s w l lt 1 lc 5 lw 16 t "%s water average", ' %(combination[0],combination[0],'($5)',combination[0],)
        line += '"../%s/energies_averages_%s.txt" u 1:%s w l lt 1 lc 6 lw 16 t "%s water average", ' %(combination[1],combination[1],'($5)',combination[1],)
        line += '"../%s/energies_averages_%s.txt" u 1:%s w l lt 1 lc 1 lw 16 t "%s Asp52 average", ' %(combination[0],combination[0],'($2)',combination[0],)
        line += '"../%s/energies_averages_%s.txt" u 1:%s w l lt 1 lc 2 lw 16 t "%s Asp52 average", ' %(combination[1],combination[1],'($2)',combination[1],)
    ##    line += '"../NEUCHA/energies_NEUCHA.txt" u 1:%s lc 7 t "NEUCHA Asp52", ' %('($2)',)
    ##    line += '"../NEUNEU/energies_NEUNEU.txt" u 1:%s lc 8 t "NEUNEU Asp52", ' %('($2)',)
    ##    line += '"../NEUCHA/energies_NEUCHA.txt" u 1:%s lc 9 t "NEUCHA protein", ' %('($3)',)
    ##    line += '"../NEUNEU/energies_NEUNEU.txt" u 1:%s lc 10 t "NEUNEU protein", ' %('($3)',)
        line = line[:-2]+'\n'
        lines += [line]
        
        fd = open('gnu.set','w')
        fd.writelines(lines)
        fd.close()

        os.system('gnuplot gnu.set')
        os.system('convert combined2.ps combined_%s_v_%s.png' %(combination[0],combination[1],))

    return


def parse_coords_from_trajectory_file(d_charges,cwd,):

    ## vacuum permittivity
    epsilon0 = 8.854187817*10**-12 ## C2 N-1 m-2
    epsilon0 = 5.52635*10**7 ## e V-1 m-1 (division of SI units by the elementary charge)
    ## coulomb constant
    kc = 1./(4*math.pi*epsilon0) ## e-1 V m
    kc *= (10**10) ## e-1 V Angstrom
    k = 8.617343*(10**-5) ## eV/K
    eV2kT = 1./(k*308.15) ## 35'C

    d_coords = {}

##    ## sidechains of titratable group
##    l_E1 = []
##    ## all protein atoms excl. titratable group
##    l_E2 = []
##    ## all solvent atoms
##    l_E3 = []

    d_v3 = {
        ## v2 keys
        ## v3 values
        '1HH1':'HH11', ## ARG
        '1HH2':'HH12', ## ARG
        '2HH1':'HH21', ## ARG
        '2HH2':'HH22', ## ARG
        '1HE2':'HE21', ## GLN
        '2HE2':'HE22', ## GLN
        '1HG1':'HG11', ## VAL
        '2HG1':'HG12', ## VAL
        '3HG1':'HG13', ## VAL
        '1HG2':'HG21', ## VAL
        '2HG2':'HG22', ## VAL
        '3HG2':'HG23', ## VAL
        '1HD1':'HD11', ## LEU
        '2HD1':'HD12', ## LEU
        '3HD1':'HD13', ## LEU
        '1HD2':'HD21', ## LEU,ASN
        '2HD2':'HD22', ## LEU,ASN
        '3HD2':'HD23', ## LEU
        }

    d_charges_solvent = {
        'OW':-.834, ## TIP3
        'HW1':.417, ## TIP3
        'HW2':.417, ## TIP3
        'CL':-1,
        'Cl':-1,
        }

    for topology in ['NEUNEU','NEUCHA','CHANEU','CHACHA',]:
        if os.path.isfile('energies_%s.txt' %(topology)):
            fd = open('energies_%s.txt' %(topology),'r')
            lines = fd.readlines()
            fd.close()
            i = int(lines[-1].split()[0])+1
        else:
            i = 1

        while os.path.isfile('trjconv/2vb1_MD%i.pdb' %(i)):

            print topology, i
            if i > 1:
                break

            d_coords35 = {}
            d_coords52 = {}
            fd = open('trjconv/2vb1_MD%i.pdb' %(i),'r')
##            else:
##                fd = open('trjconv/2vb1_MD%i.pdb' %(i),'r')
##                s = fd.read()
##                fd.close()
##                s.replace('ASH','ASP')
##                s.replace('GLH','GLU')
##                s.replace('CYM','CYS')
##                s.replace('NLY','LYS') ## N-terminal
##                s.replace('CLE','LEU') ## C-terminal
##                s.replace('LYP','LYS')
##                s.replace('HID','HIS')
##                fd = open('tmp1.pdb','w')
##                fd.write(s)
##                fd.close()
##                
##                os.system('/home/people/tc/reduce.3.14.080821.linuxi386 tmp1.pdb -noog -noadj > tmp.pdb')
##                fd = open('tmp.pdb','r')
            for line in fd:
                record = line[:6].strip()
                if record == 'ATOM':
                    res_name = line[17:20]
                    if res_name == 'SOL':
                        break
                    res_no = int(line[22:26])
                    if res_no in [35,52,] and res_name != 'SOL':
                        atom_name = line[12:16].strip()
##                        if atom_name == 'HE2' and topology[:3] == 'CHA':
##                            continue
                        x = float(line[30:38])
                        y = float(line[38:46])
                        z = float(line[46:54])
                        coord = numpy.array([x,y,z,])
                        if res_no == 35:
                            d_coords35[atom_name] = coord
                        if res_no == 52:
                            d_coords52[atom_name] = coord
            fd.close()
            del res_no
            del atom_name
            del res_name

            E1 = 0 ## Asp52 (side chain)
            E2 = 0 ## protein (excl. 35, incl. Asp52 main chain)
            E3 = 0 ## chloride ions
            E4 = 0 ## water
            fd = open('trjconv/2vb1_MD%i.pdb' %(i),'r')
            for atom_name1 in list(set(d_coords35.keys()+['HE2'],)-set(l_backbone_atoms)):

                ## HE2 not present if Glu35 charged
                if atom_name1 == 'HE2' and topology[:3] == 'CHA':
                    continue

                ## Glu35 is protonated, but MD does not contain proton
                if topology[:3] == 'NEU' and cwd[:3] == 'CHA' and atom_name1 == 'HE2':
                    ## place hydrogen atom HE2 between oxygen atoms OE1,OE2
                    coord1 = (d_coords35['OE1']+d_coords35['OE2'])/2.
                else:
                    coord1 = d_coords35[atom_name1]

                charge1 = d_charges[topology][35][atom_name1]

                for line in fd:
                    
                    record = line[:6].strip()
                    if record == 'ATOM':
                        atom_no2 = int(line[6:11])
                        atom_name2 = line[12:16].strip()
                        if atom_name2 in d_v3.keys():
                            atom_name2 = d_v3[atom_name2]
                        res_name2 = line[17:20].strip()
                        res_no2 = int(line[22:26])
                        x = float(line[30:38])
                        y = float(line[38:46])
                        z = float(line[46:54])
                        coord2 = numpy.array([x,y,z,])

                        ## do not calculate interaction energy with self
                        if res_no2 == 35 and res_name2 != 'SOL':
                            continue

                        ## HD2 not present if Asp52 charged
                        if res_no2 == 52 and atom_name2 == 'HD2' and topology[-3:] == 'CHA':
                            continue
                        
                        if res_name2 in ['SOL','CL-','Cl',]:
                            charge2 = d_charges_solvent[atom_name2]
                        else:
        ##                    ## translate from gromacs to amber
        ##                    if atom_name == 'O1':
        ##                        atom_name = 'OC1'
        ##                    if atom_name == 'O2':
        ##                        atom_name = 'OC2'
                            try:
                                charge2 = d_charges[topology][res_no2][atom_name2]
                            except:
                                print cwd, topology, res_no2, atom_name2
                                print d_charges[topology][res_no2]
                                stop
        ##                    ## compensate for missing hydrogens in gromacs MDs (wrong way of doing it!!!)
        ##                    if atom_name not in ['N','C','O',] and atom_name[0] != 'H':
        ##                        for hydrogen_name in d_charges[res_no].keys():
        ##                            if hydrogen_name == 'H':
        ##                                continue
        ##                            if hydrogen_name[0] != 'H':
        ##                                continue
        ##                            if hydrogen_name[1:len(atom_name)] == atom_name[1:]:
        ##                                charge2 += d_charges[res_no][hydrogen_name]
                        dist = math.sqrt(sum((coord2-coord1)**2))
                        ## solvent
                        if res_name2 in ['SOL','CL-','Cl',]:
                            E = eV2kT*kc*(charge1*charge2)/(dist)
                            if res_name2 in ['CL-','Cl',]:
                                E3 += E
                            else:
                                E4 += E
                        ## protein
                        else:
                            E = eV2kT*kc*(charge1*charge2)/(dist)
                            if res_no2 == 52:
                                if atom_name2 not in [
                                    'N','H','CA','C','O',
                                    ]: ## alpha carbon hydrogen...
                                    E1 += E
                                else:
                                    E2 += E
                            else:
                                E2 += E

                ## Asp52 is protonated, but MD does not contain proton
                if topology[-3:] == 'NEU' and cwd[-3:] == 'CHA':
                    ## place hydrogen atom HD2 between oxygen atoms OD1,OD2
                    coord2 = (d_coords52['OD1']+d_coords52['OD2'])/2.
                    dist = math.sqrt(sum((coord2-coord1)**2))
                    charge2 = d_charges[topology][52]['HD2']
                    E = eV2kT*kc*(charge1*charge2)/(dist)

                ## end of loop over atom_names1

            fd.close()

            ## append energies to file
            fd = open('energies_%s.txt' %(topology),'a')
            fd.write('%i %f %f %f %f\n' %(i,E1,E2,E3,E4,))
            fd.close()

            ## next frame
            i += 1

            ## end of loop over frames

        ## end of loop over topologies

    return d_coords


if __name__=='__main__':
    main()

##    ##
##    ## histogram
##    ##
##    step = 1
##    d_histogram = {}
##    l = []
##    count_max = 0
##    for i in range(Min,Max+step,step):
##        d_histogram[i] = 0
##    for line in lines:
####        if int(line.split()[0]) < 50:
####            continue
####        if int(line.split()[0]) > 500:
####            break
##        Sum = float(line.split()[1])+float(line.split()[2])+float(line.split()[3])+float(line.split()[4])
##        l += [Sum]
##        d_histogram[step*int(Sum/step)] += 1
##        if d_histogram[step*int(Sum/step)] > count_max:
##            count_max = d_histogram[step*int(Sum/step)]
##    mean,sigma = statistics.stderr(l)
##    factor = count_max/(0.398942280401433/sigma)
##
##    lines2 = []
##    for k in range(Min,Max+step,step):
##        v = d_histogram[k]
##        lines2 += ['%s %s\n' %(k,v)]
##
##    fd = open('histogram.txt','w')
##    fd.writelines(lines2)
##    fd.close()
##
##    fd = open('gnu.set','w')
##    fd.writelines([
##        'set terminal png\n',
##        'set output "histogram_%s.png"\n' %(topology),
##        'set nokey\n',
##        'set title "%s"\n' %(topology),
##        'invsqrt2pi = 0.398942280401433\n',
##        'normal(x,mu,sigma)=sigma<=0?1/0:invsqrt2pi/sigma*exp(-0.5*((x-mu)/sigma)**2)\n',
##        'plot [%s:%s]"histogram.txt" u 1:2 w boxes, %s*normal(x,%s,%s)\n' %(Min,Max,factor,mean,sigma,),
####        'plot [-150:0]normal(x,%s,%s)\n' %(mean,sigma,),
##        ])
##    fd.close()
##
##    os.system('gnuplot gnu.set')
