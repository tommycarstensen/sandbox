import sys, numpy, math
sys.path.append('../pdb')
##import parse_pdb
##import crystalcontacts

##fd = open('1atp.pdb','r')
##lines = fd.readlines()
##fd.close()
##d_header = parse_pdb.parse_header(lines)
##d_coordinates, d_ATOMseq = parse_pdb.parse_coordinates(
##    lines,d_header,
##    parse_atom_seq = False, parse_ligands = False,
##    )

####d = {
####    1.5: set([6031, 5926, 4876, 5968, 4877, 5982, 6037, 5983, 5628, 5969, 5984, 4878, 5985, 5986, 5987, 5988, 5970, 5989, 4879, 5990, 5991, 5992, 4675, 5993, 5971, 4880, 5995, 4676, 5923, 5972, 5927, 6000, 6001, 5290, 5291, 5292, 5293, 5294, 5295, 5296, 4882, 5053, 5974, 5333, 5334, 5335, 4883, 5337, 5338, 5339, 5340, 5341, 3043, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3333, 3334, 3335, 3336, 4361, 4362, 4363, 4364, 4365, 4366, 4367, 4368, 4369, 4370, 4371, 4372, 4373, 4374, 4375, 4376, 4377, 4378, 4379, 4380, 3044, 4382, 5928, 4886, 3045, 5442, 5443, 5444, 5445, 5446, 5447, 5448, 5449, 6029, 6030, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3423, 4885, 3441, 3442, 3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453, 3454, 3455, 3456, 4674, 3475, 3476, 3477, 3478, 3479, 3480, 3481, 3482, 3483, 3484, 3485, 4677, 4678, 4679, 4680, 4681, 4682, 4683, 5929, 6053, 5607, 5608, 5609, 5610, 5611, 5612, 5613, 5614, 5615, 5616, 5617, 5618, 5619, 5620, 5621, 5622, 5623, 5624, 5625, 5626, 5627, 5336, 4893, 4357, 4358, 5999, 4359, 4360, 4873, 4874, 5924, 3650, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659, 3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675, 3676, 3677, 3678, 3679, 3680, 3681, 3682, 3683, 3684, 3685, 4881, 3690, 3691, 3692, 3693, 3694, 3695, 3696, 3697, 3698, 3699, 3700, 4884, 5055, 3708, 3709, 3710, 3711, 3712, 3713, 3714, 3715, 3716, 3717, 3718, 3719, 3720, 3721, 4887, 4888, 4889, 4890, 4891, 4892, 4381, 4894, 3017, 4895, 3046, 4896, 4897, 5922, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891, 3916, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 5994, 3047, 5996, 5997, 5998, 5925, 4871, 3048, 6002, 6003, 6004, 6005, 6006, 6018, 6019, 6020, 6021, 6022, 6023, 6024, 6025, 6026, 6027, 6028, 4875, 4872, 3053, 6032, 6033, 6034, 6035, 6036, 3054, 6038, 6039, 6040, 3055, 3056, 6052, 3910, 6054, 3057, 6056, 6057, 6058, 3911, 3058, 6055, 3912, 3059, 3913, 3060, 5052, 3914, 5054, 3061, 5056, 5057, 5058, 3915, 3014, 3015, 3016, 2892, 3018, 3019, 3020, 3021, 3022, 3917, 3918, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 4067, 4068, 4069, 4070, 4071, 4072, 3049, 3050, 3051, 3052, 4077, 4078, 4079, 4080, 4081, 4082, 4083, 4084, 4085, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 5973]),
####    2: set([4096, 4097, 4098, 4099, 4100, 4101, 4102, 4103, 6031, 5987, 5926, 5968, 4876, 4877, 5982, 6037, 5983, 5628, 5969, 4912, 5984, 4878, 5985, 5986, 4175, 4176, 4177, 4178, 4179, 4180, 4181, 4182, 4183, 4184, 4185, 5970, 4913, 4965, 4879, 5988, 4966, 4967, 4968, 4675, 4969, 5971, 4914, 5994, 4880, 4971, 5996, 5997, 4676, 5923, 5993, 5972, 4915, 5927, 4881, 6000, 6001, 5290, 5291, 5292, 5293, 5294, 5295, 5296, 5973, 4916, 4882, 5053, 5974, 4917, 5334, 5335, 4883, 5337, 5338, 5339, 5340, 5341, 5929, 4918, 3043, 5989, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3333, 3334, 3335, 3336, 4361, 4362, 4363, 4364, 4365, 4366, 4367, 4368, 4369, 4370, 4371, 4372, 4373, 4374, 4375, 4376, 4377, 4378, 4379, 4380, 3044, 4382, 5995, 5928, 4886, 3045, 5442, 5443, 5444, 5445, 5446, 5447, 5448, 5449, 6029, 6030, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3423, 4885, 5753, 3441, 3442, 3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453, 3454, 3455, 3456, 4674, 5990, 3475, 3476, 3477, 3478, 3479, 3480, 3481, 3482, 3483, 3484, 3485, 4677, 5333, 4678, 5992, 4679, 4680, 4681, 4682, 4683, 5572, 5573, 5574, 5575, 5576, 5577, 5578, 5579, 5580, 5581, 5582, 6053, 5607, 5608, 5609, 5610, 5611, 5612, 5613, 5614, 5615, 5616, 5617, 5618, 5619, 5620, 5621, 5622, 5623, 5624, 5625, 5626, 5627, 5336, 4893, 4357, 4358, 5999, 4359, 4360, 4873, 4874, 5924, 3650, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659, 3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675, 3676, 3677, 3678, 3679, 3680, 3681, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 3689, 3690, 3691, 3692, 3693, 3694, 3695, 3696, 3697, 3698, 3699, 3700, 5749, 5750, 5751, 5752, 4884, 5055, 3708, 3709, 3710, 3711, 3712, 3713, 3714, 3715, 3716, 3717, 3718, 3719, 3720, 3721, 4887, 4888, 4889, 4890, 4891, 4892, 5746, 4381, 5747, 4894, 3017, 5748, 5991, 4895, 3046, 4896, 4919, 4897, 5922, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891, 3916, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 4970, 3047, 4972, 4973, 5998, 5925, 4871, 3048, 6002, 6003, 6004, 6005, 6006, 6018, 6019, 6020, 6021, 6022, 6023, 6024, 6025, 6026, 6027, 6028, 4875, 4872, 3053, 6032, 6033, 6034, 6035, 6036, 3054, 6038, 6039, 6040, 3055, 3056, 6052, 3910, 6054, 3057, 6056, 6057, 6058, 3911, 3058, 6055, 3912, 3059, 3913, 3060, 5052, 3914, 5054, 3061, 5056, 5057, 5058, 3915, 3014, 3015, 3016, 2892, 3018, 3019, 3020, 3021, 3022, 3917, 3918, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 4067, 4068, 4069, 4070, 4071, 4072, 3049, 3050, 3051, 3052, 4077, 4078, 4079, 4080, 4081, 4082, 4083, 4084, 4085, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 4093, 4094, 4095]),
####    3: set([4096, 4097, 4098, 4099, 4100, 4101, 4102, 4103, 3069, 2865, 2866, 4175, 4176, 4177, 4178, 4179, 4180, 4181, 4182, 4183, 4184, 4185, 2851, 5993, 4268, 4269, 4270, 4271, 4272, 4273, 4334, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342, 4357, 4358, 4359, 4360, 4361, 4362, 4363, 4364, 4365, 4366, 4367, 4368, 4369, 4370, 4371, 4372, 4373, 4374, 4375, 4376, 4377, 4378, 4379, 4380, 4381, 4382, 4473, 4474, 4475, 4476, 4477, 4478, 4479, 4480, 4481, 2867, 2812, 2813, 4862, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822, 4871, 4872, 4873, 2826, 4674, 4675, 4676, 4677, 4678, 4679, 4680, 4681, 4682, 4683, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 4860, 4861, 2814, 4863, 4864, 4865, 4866, 4867, 4868, 4869, 4870, 2823, 2824, 2825, 4874, 2827, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883, 4884, 4885, 4886, 4887, 4888, 4889, 4890, 4891, 4892, 4893, 4894, 4895, 4896, 4897, 4898, 4899, 4900, 4901, 4902, 4903, 4904, 2857, 2858, 3573, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915, 4916, 4917, 4918, 4919, 2872, 2868, 2874, 2875, 2876, 2877, 2878, 2869, 2880, 2881, 2882, 2883, 2884, 2870, 2886, 2887, 2888, 2889, 2890, 2871, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2873, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916, 4965, 4966, 4967, 4968, 4969, 4970, 4971, 4972, 4973, 5625, 2879, 2944, 2945, 2946, 2947, 2948, 3576, 2950, 2951, 2972, 2973, 2974, 2885, 2976, 2977, 2978, 2979, 3572, 5052, 5053, 5054, 5055, 5056, 5057, 5058, 2891, 3574, 2828, 3015, 3016, 3017, 3018, 5623, 3020, 3021, 3022, 3023, 5072, 5073, 5074, 5075, 5076, 5077, 5078, 5079, 5080, 3033, 3034, 3035, 3036, 3578, 3038, 3039, 3040, 3041, 3042, 3579, 3044, 3045, 3046, 3047, 4875, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3242, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 5292, 2903, 5293, 5294, 5295, 2917, 2918, 2919, 2920, 2921, 5971, 5997, 6001, 3241, 5290, 3243, 3244, 3245, 3246, 3247, 5296, 5291, 5324, 5325, 5326, 5327, 5328, 5329, 5330, 5331, 5332, 5333, 5334, 5335, 5336, 5337, 5338, 5339, 5340, 5341, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3333, 3334, 3335, 3336, 2949, 6023, 5442, 5443, 5444, 5445, 5446, 5447, 5448, 5449, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3423, 3441, 3442, 3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453, 3454, 3455, 3456, 3475, 3476, 3477, 3478, 3479, 3480, 3481, 3482, 3483, 3484, 3485, 5992, 2975, 5572, 5573, 5574, 5575, 5576, 5577, 5578, 5579, 5580, 5581, 5582, 5583, 5584, 5585, 5586, 5587, 5588, 6053, 5607, 5608, 5609, 5610, 5611, 5612, 5613, 5614, 5615, 5616, 5617, 5618, 5619, 5620, 5621, 5622, 3575, 5624, 3577, 5626, 5627, 5628, 5629, 5630, 5631, 5632, 5633, 5634, 5635, 5636, 3650, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659, 3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675, 3676, 3677, 3678, 3679, 3680, 3681, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 3689, 3690, 3691, 3692, 3693, 3694, 3695, 3696, 3697, 3698, 3699, 5748, 3701, 3702, 3703, 3704, 5753, 3706, 3707, 3708, 3709, 3710, 3711, 3712, 3713, 3714, 3715, 3716, 3717, 3718, 3719, 3720, 3721, 6057, 2852, 3014, 5746, 5747, 2853, 3700, 5749, 3019, 5750, 5751, 5752, 2854, 3705, 3024, 3025, 3026, 2855, 3027, 3028, 3029, 3030, 3031, 2856, 3032, 5922, 5923, 5924, 5925, 5926, 5927, 5928, 5929, 3037, 6027, 3910, 3911, 3912, 3913, 3914, 3915, 3916, 3917, 3918, 5968, 5969, 5970, 3043, 5972, 5973, 5974, 5975, 5976, 5977, 5978, 5979, 5980, 5981, 5982, 5983, 5984, 5985, 5986, 5987, 5988, 5989, 5990, 5991, 2863, 2859, 5994, 5995, 5996, 4905, 5998, 5999, 6000, 3048, 6002, 6003, 6004, 6005, 6006, 6018, 6019, 6020, 6021, 6022, 2860, 6024, 6025, 6026, 4906, 6028, 6029, 6030, 6031, 6032, 6033, 6034, 6035, 6036, 6037, 6038, 6039, 6040, 6052, 2861, 6054, 6055, 6056, 4907, 6058, 6059, 6060, 6061, 6062, 2862, 2864, 4060, 4061, 4062, 4063, 4064, 4065, 4066, 4067, 4068, 4069, 4070, 4071, 4072, 4073, 4074, 4075, 4076, 4077, 4078, 4079, 4080, 4081, 4082, 4083, 4084, 4085, 4086, 4087, 4088, 4089, 4090, 4091, 4092, 4093, 4094, 4095])
####    }
####
####d2 = {
####    '10-3':set(range(2922,6092+1))-d[3],
####    '3-2':d[3]-d[2],
####    '2-1.5':d[2]-d[1.5],
####    '1.5-0':d[1.5],
####    }
####
####for k in d2.keys():
####    l = list(d2[k])
####    l.sort()
####    resmin = l[0]
####    l_ranges = []
####    for i in range(1,len(l)):
####        if l[i] != l[i-1]+1:
####            l_ranges += [[resmin,l[i-1]]]
####            resmin = l[i]
####        if i == len(l)-1:
####            l_ranges += [[resmin,l[i]]]
####    print k, l_ranges
####stop    
####
####
####print 'protein', range(1,2921+1)
######print 'all contacts', range(2922,6092+1)
####print '10-3', set(range(2922,6092+1))-d[3]
####print '3-2', d[3]-d[2]
####print '2-1.5', d[2]-d[1.5]
####print '1.5-0', d[1.5]
####stop

fd = open('1atp.pdb','r')
lines = fd.readlines()
fd.close()

fd = open('1atp_soushl_10.pdb','r')
lines_10 = fd.readlines()
fd.close()
##lines_10 = lines_10[2774:] ## incl inhibitor
lines_10 = lines_10[2931:] ## excl inhibitor

d_distances = {}
for line in lines:
    print line,
    record = line[:6].strip()
    if record not in ['ATOM','HETATM',]:
        continue
    chain = line[21]
    if not chain == 'E':
        continue
    x2 = float(line[30:38])
    y2 = float(line[38:46])
    z2 = float(line[46:54])
    coord2 = numpy.array([x2,y2,z2,])
    res_no = int(line[22:26])
##    if res_no not in [197,338,]:
##        continue
    if not chain in d_distances.keys():
        d_distances[chain] = {}
    if not res_no in d_distances[chain].keys():
        d_distances[chain][res_no] = []
    for line_10 in lines_10:
        record = line_10[:6].strip()
        if record != 'ATOM':
            continue
        x1 = float(line_10[30:38])
        y1 = float(line_10[38:46])
        z1 = float(line_10[46:54])
        coord1 = numpy.array([x1,y1,z1,])
        dist = math.sqrt(sum((coord2-coord1)**2))
        d_distances[chain][res_no] += [dist]

for chain in d_distances.keys():
    for res_no in d_distances[chain].keys():
        print chain, res_no
        d_distances[chain][res_no] = min(d_distances[chain][res_no])

print d_distances
stop

d_distances = {
    'I': {5: 2.8646270263334461, 6: 5.7177455347365731, 7: 4.2054475386098931, 8: 3.8434211322726521, 9: 2.9612054977660685, 10: 6.6296646974036317, 11: 3.3435768272913959, 12: 3.3566723104884693, 13: 3.6546765930790652, 14: 4.505493202747064, 15: 6.6041855667447766, 16: 3.0069858662787246, 17: 5.7675343952160372, 18: 6.633997512812317, 19: 10.31117335709181, 20: 8.0625460618839284, 21: 7.3775937134000555, 22: 7.9711896226347543, 23: 2.6631280479916848, 24: 3.2062117833979711},
    'E': {15: 7.2857178095229571, 16: 5.5994086294893668, 17: 3.7930785649654037, 18: 7.9573114806447043, 19: 10.359142918214808, 20: 8.0172629369380157, 21: 6.6319988691193261, 22: 12.150686976463511, 23: 7.5067818670852562, 24: 8.9004477977234391, 25: 12.371841900056758, 26: 7.4058643654876635, 27: 7.565001387970792, 28: 8.459414164113257, 29: 9.0502350798197515, 30: 4.1491084584522495, 31: 6.3102568885901933, 32: 4.528592054932747, 33: 7.4670784782269424, 34: 10.39166536220254, 35: 5.5994086294893686, 36: 8.9222258994042516, 37: 11.399924648873782, 38: 13.143103476728776, 39: 7.6620407855870862, 40: 10.873932775219828, 41: 5.6755642010288261, 42: 9.1582608065068758, 43: 10.768495577377557, 44: 8.0668857683743127, 45: 12.863286438542836, 46: 10.101599526807622, 47: 10.663588232860457, 48: 11.577974391058223, 49: 10.395491234184174, 50: 11.310404855706979, 51: 11.794193232264767, 52: 8.2966203962818525, 53: 5.5925123155876921, 54: 7.1570623163418112, 55: 10.164870781274104, 56: 13.028626635221382, 57: 15.092154584419021, 58: 15.604831751736382, 59: 11.47069051975512, 60: 10.033716460016199, 61: 4.1789044018737735, 62: 5.9444253717243338, 63: 2.6631280479916848, 64: 2.83423799282982, 65: 2.4758889312729671, 66: 3.0856955455780164, 67: 3.1874944705834398, 68: 6.1186639881595086, 69: 7.2923829438668397, 70: 13.115515925803299, 71: 15.713535884707809, 72: 14.200568650585794, 73: 13.770008060999819, 74: 12.37217527357255, 75: 9.4459579186020068, 76: 10.457657577105877, 77: 7.4583936608360926, 78: 5.6324066792091649, 79: 7.8419106727888694, 80: 7.2738746895997588, 81: 2.475888931272971, 82: 3.0371863624084696, 83: 4.5204474336065452, 84: 9.3561207773307427, 85: 7.1476293972197524, 86: 2.9001693054027036, 87: 8.3968871017776578, 88: 8.5880324289094272, 89: 3.7371597503986895, 90: 4.5955276084471537, 91: 8.991062562344899, 92: 9.9295112165705302, 93: 2.9612054977660707, 94: 8.435240660467251, 95: 12.001906556876703, 96: 10.342767763031327, 97: 11.275316403542741, 98: 12.529368100586717, 99: 16.072015492775009, 100: 15.902785793690363, 101: 16.371557714524297, 102: 15.077606739797931, 103: 16.503845279206903, 104: 18.153111193401532, 105: 12.805831913624353, 106: 15.044801726842397, 107: 11.765814591433948, 108: 10.480804406151275, 109: 12.532743354908376, 110: 12.60347372750862, 111: 8.0029785705073593, 112: 12.450781541734639, 113: 8.9973377173472819, 114: 13.893106779982654, 115: 14.059769272644553, 116: 11.68577622582257, 117: 15.863035901113001, 118: 14.220861401476352, 119: 13.001517219155616, 120: 13.179751932415117, 121: 12.350950651670502, 122: 11.369611558888018, 123: 14.39344322947084, 124: 13.741464623539953, 125: 12.520445599099098, 126: 11.396729794111996, 127: 7.9496098017449892, 128: 10.120677299469635, 129: 5.4815932902761029, 130: 5.4529937648964886, 131: 7.6042107414247821, 132: 7.8286770913098715, 133: 4.4984338385709313, 134: 3.8124079005269098, 135: 6.4761402856948678, 136: 7.4246101581160486, 137: 9.9330556225161644, 138: 11.865063253097306, 139: 14.713847015651618, 140: 14.557380464905078, 141: 12.710888442591258, 142: 14.834060637600212, 143: 15.257598074402145, 144: 9.6660701942412981, 145: 12.931766198010232, 146: 14.996869039902963, 147: 14.219966631465773, 148: 10.907862622897303, 149: 13.807115448202786, 150: 16.180370267704014, 151: 13.388526767348228, 152: 12.085518027788467, 153: 16.637185128500551, 154: 15.305097549509442, 155: 12.228837638958169, 156: 13.370912646487524, 157: 10.920216023504297, 158: 10.802743031286081, 159: 10.124018717880761, 160: 6.9799008588947737, 161: 5.2398130691848168, 162: 7.0758871528593499, 163: 9.5222907433033157, 164: 12.378592003939705, 165: 8.9627488528910604, 166: 13.988565080093098, 167: 17.846168384277899, 168: 12.993751613756515, 169: 11.84637037239677, 170: 10.007983613096098, 171: 13.65145395186901, 172: 13.52030894617427, 173: 13.736915010292524, 174: 14.363538665663137, 175: 15.049195925364252, 176: 9.898403204557793, 177: 11.420106610710778, 178: 15.90633524731577, 179: 13.779501478645734, 180: 17.993402429779643, 181: 17.388176040056646, 182: 19.760747885644406, 183: 16.736814093488643, 184: 14.012978662654136, 185: 12.171587037030136, 186: 12.013466901773194, 187: 10.16594358630816, 188: 8.7374518596670949, 189: 4.0275467719195994, 190: 3.3435768272913959, 191: 3.6375593465949114, 192: 3.0069858662787254, 193: 4.7336802807118286, 194: 3.2283466356635255, 195: 6.1376106914661852, 196: 3.8124079005269098, 198: 9.6183019291348941, 199: 11.995935061511462, 200: 11.779740913959017, 201: 13.14060428595276, 202: 11.379075709388703, 203: 12.18484029439861, 204: 15.614416511672795, 205: 13.579750697269814, 206: 15.128102623924788, 207: 11.85789416380497, 208: 10.9355469913489, 209: 11.201335143633546, 210: 12.695713961806165, 211: 9.3675815448812614, 212: 6.2088029442075223, 213: 7.3777798828644929, 214: 7.3920288825193321, 215: 9.2774149955685381, 216: 11.090720265158618, 217: 8.0980848353175467, 218: 14.442613094589221, 219: 14.047527362493371, 220: 14.075433670050808, 221: 16.771342999294959, 222: 12.585774072340564, 223: 19.262759978777705, 224: 17.68564276468345, 225: 16.658084943954393, 226: 16.467194569810612, 227: 16.685570862274986, 228: 16.882636820117881, 229: 12.687164419207312, 230: 12.264378051902998, 231: 14.348688720576527, 232: 12.397640581981719, 233: 9.7343353137232747, 234: 10.549741892577279, 235: 8.4374153625384611, 236: 12.242751120561099, 237: 12.281840822938555, 238: 10.597697910395446, 239: 9.5293517617936647, 240: 9.000609923777386, 241: 5.2915076301560786, 242: 5.6755642010288279, 243: 8.3264630546228933, 244: 7.9546955944272311, 245: 9.016325803785044, 246: 11.457557724052712, 247: 10.245703587357971, 248: 7.1457916986153469, 249: 7.9384648389975254, 250: 9.6506135038141476, 251: 6.1514891692987623, 252: 4.6129406022622899, 253: 5.5647190405266649, 254: 3.514713359578558, 255: 5.8240139938018709, 256: 5.3230888589239242, 257: 7.9922154000001777, 258: 10.925862437354777, 259: 7.3290745664101431, 260: 9.749906512372311, 261: 12.425474196182613, 262: 13.41485478862891, 263: 11.916597081381916, 264: 10.249946877911125, 265: 13.131791195415802, 266: 9.5136800976278373, 267: 10.735823070449699, 268: 12.890399101657016, 269: 11.727548507680538, 270: 5.1987133985246761, 271: 11.631095950081402, 272: 13.91334050470986, 273: 10.54089967697255, 274: 10.448888409778334, 275: 9.9389365125248688, 276: 10.292954872144346, 277: 9.4181174870565307, 278: 8.7946782203785041, 279: 9.2932690157984776, 280: 14.371993946561487, 281: 13.867005300352345, 282: 14.064721717830041, 283: 12.171859430670402, 284: 10.642382862874271, 285: 7.7167134195847904, 286: 4.528592054932747, 287: 9.0314991557326749, 288: 11.100464224526828, 289: 6.6155441953024532, 290: 8.883687353796283, 291: 10.933405599354668, 292: 7.838882637213036, 293: 8.2103867752987121, 294: 8.8398852368116163, 295: 8.5245920136977809, 296: 9.8310097650241417, 297: 5.7460679599183306, 298: 3.514713359578558, 299: 3.9050850182806522, 300: 3.5719421887818963, 301: 4.0136019982056022, 302: 5.6858499804338836, 303: 5.3230888589239234, 304: 7.6746442914313633, 305: 9.0919377472571821, 306: 11.11556570760121, 307: 7.5594238537073721, 308: 12.946396448433056, 309: 5.1987133985246778, 310: 9.6355196019726925, 311: 9.0239223179280525, 312: 13.137827636257068, 313: 15.695377153799141, 314: 11.431136338964732, 315: 14.07358664307006, 316: 13.595132548084996, 317: 12.038024796452282, 318: 10.799367805570844, 319: 10.138737840579564, 320: 10.019183050528623, 321: 6.345639841655057, 322: 9.3406847714715209, 323: 11.86444153763674, 324: 10.845249927963856, 325: 8.9878307171419287, 326: 8.9595433477382098, 327: 7.1865433276367297, 328: 3.2283466356635246, 329: 6.4246189770289108, 330: 7.8016753329012607, 331: 11.110683777337918, 332: 12.70010586570049, 333: 12.909426788204039, 334: 15.286303837095479, 335: 16.587114697861111, 336: 12.909264463942165, 337: 13.988278057001871, 339: 9.6486283999333278, 340: 9.9105970556773215, 341: 6.6319988691193261, 342: 10.121782995105159, 343: 9.9612839533867312, 344: 7.7684703127449746, 345: 6.8517510900499001, 346: 6.7710304237981402, 347: 8.2829378242263783, 348: 3.7930785649654046, 349: 2.8646270263334461, 350: 7.9112600134239033}
    }
l = ['## res_no dist_crystcon_max\n']
for k in range(15,350+1):
    if k in [197,338,]:
        continue
    v = d_distances['E'][k]
    for r in [3,4,5,10,100]:
        if v < r:
            l += ['%s %s %s\n' %(k,r,v,)]
            break
fd = open('tmp.txt','w')
fd.writelines(l)
fd.close()

stop

d_lines = {}
for r in [3,2,1.5,]:
    fd = open('1atp_soushl_%s.pdb' %(r),'r')
    lines_inner = fd.readlines()
    fd.close()
    lines_inner = lines_inner[2774:]
    d_lines[r] = lines_inner

lines_out = []
d_atoms = {}
for r in [3,2,1.5,]:
    d_atoms[r] = set()
    lines_inner = d_lines[r]
    for line_10 in lines_10:
        print line_10,
        record = line_10[:6].strip()
        if record in ['ATOM',]:
            atom_no = int(line_10[6:11])
            x2 = float(line_10[30:38])
            y2 = float(line_10[38:46])
            z2 = float(line_10[46:54])
            coord2 = numpy.array([x2,y2,z2,])

            for line_inner in lines_inner:
                record = line_inner[:6].strip()
                if record in ['ATOM',]:
                    x1 = float(line_inner[30:38])
                    y1 = float(line_inner[38:46])
                    z1 = float(line_inner[46:54])
                    coord1 = numpy.array([x1,y1,z1,])

                    if x1 == x2 and y1 == y2 and z1 == z2:
                        d_atoms[r] |= set([atom_no])

print d_atoms
stop
##fd = open('1atp_soushl_2.pdb','r')
##lines = fd.readlines()
##fd.close()
##
##lines_out = lines[:2774]+lines_out
##
##fd = open('1atp_soushl_%s-%s.pdb' %(r1,r2,),'w')
##fd.writelines(lines_out)
##fd.close()

##lines_out = []
##for chain in d_coordinates['chains'].keys():
##    for res_no in d_coordinates['chains'][chain]['residues'].keys():
##        print chain,res_no
##        for iCode in d_coordinates['chains'][chain]['residues'][res_no]['d_iCodes'].keys():
##            vicinal = False
##            for atom_name in d_coordinates['chains'][chain]['residues'][res_no]['d_iCodes'][iCode]['atoms'].keys():
##                coordinate = d_coordinates['chains'][chain]['residues'][res_no]['d_iCodes'][iCode]['atoms'][atom_name]['coordinate']
##                ## wt
##                for line in lines:
##                    record = line[:6].strip()
##                    if record in ['ATOM',]:
##                        x = float(line[30:38])
##                        y = float(line[38:46])
##                        z = float(line[46:54])
##                        coord2 = numpy.array([x,y,z,])
##                        dist = math.sqrt(sum((coord2-coordinate)**2))
##                        if dist < 3:
##                            vicinal = True
##                            break
##            if vicinal == False:
##                for atom_name in d_coordinates['chains'][chain]['residues'][res_no]['d_iCodes'][iCode]['atoms'].keys():
##                    d_chains = {chain:chain}
##                    coordinate = d_coordinates['chains'][chain]['residues'][res_no]['d_iCodes'][iCode]['atoms'][atom_name]['coordinate']
##                    line = crystalcontacts.build_line(
##                        atom_name,d_coordinates,coordinate,
##                        chain,res_no,iCode,
##                        d_chains,
##                        )
##                    lines_out += [line]
##print lines_out
####                        atom_no = int(line[6:11])
####                        if atom_no >= 2937:
####                            break
####                    else:
####                        lines_out += line
